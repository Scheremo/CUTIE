// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "common_cells/assertions.svh"

module layer_params_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output layer_params_reg_pkg::layer_params_reg2hw_t reg2hw, // Write
  input  layer_params_reg_pkg::layer_params_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import layer_params_reg_pkg::* ;

  localparam int AW = 8;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [6:0] feature_map_width_wd;
  logic feature_map_width_we;
  logic [6:0] feature_map_height_wd;
  logic feature_map_height_we;
  logic [7:0] feature_map_n_i_wd;
  logic feature_map_n_i_we;
  logic [7:0] feature_map_n_o_wd;
  logic feature_map_n_o_we;
  logic tcn_is_tcn_wd;
  logic tcn_is_tcn_we;
  logic [4:0] tcn_tcn_width_wd;
  logic tcn_tcn_width_we;
  logic [4:0] tcn_tcn_width_mod_dil_wd;
  logic tcn_tcn_width_mod_dil_we;
  logic [1:0] tcn_tcn_k_wd;
  logic tcn_tcn_k_we;
  logic [2:0] kernel_k_wd;
  logic kernel_k_we;
  logic kernel_padding_wd;
  logic kernel_padding_we;
  logic [1:0] kernel_stride_w_wd;
  logic kernel_stride_w_we;
  logic [1:0] kernel_stride_h_wd;
  logic kernel_stride_h_we;
  logic pooling_en_wd;
  logic pooling_en_we;
  logic pooling_p_type_wd;
  logic pooling_p_type_we;
  logic [1:0] pooling_kernel_wd;
  logic pooling_kernel_we;
  logic pooling_padding_wd;
  logic pooling_padding_we;
  logic [10:0] thresholds_th_low_wd;
  logic thresholds_th_low_we;
  logic [10:0] thresholds_th_high_wd;
  logic thresholds_th_high_we;
  logic ctrl1_wd;
  logic ctrl1_we;
  logic ctrl2_qs;
  logic ctrl2_wd;
  logic ctrl2_we;
  logic ctrl3_qs;
  logic ctrl3_wd;
  logic ctrl3_we;
  logic [10:0] fp_out_0_fp_out_0_qs;
  logic fp_out_0_fp_out_0_re;
  logic [10:0] fp_out_0_fp_out_1_qs;
  logic fp_out_0_fp_out_1_re;
  logic [10:0] fp_out_1_fp_out_2_qs;
  logic fp_out_1_fp_out_2_re;
  logic [10:0] fp_out_1_fp_out_3_qs;
  logic fp_out_1_fp_out_3_re;
  logic [10:0] fp_out_2_fp_out_4_qs;
  logic fp_out_2_fp_out_4_re;
  logic [10:0] fp_out_2_fp_out_5_qs;
  logic fp_out_2_fp_out_5_re;
  logic [10:0] fp_out_3_fp_out_6_qs;
  logic fp_out_3_fp_out_6_re;
  logic [10:0] fp_out_3_fp_out_7_qs;
  logic fp_out_3_fp_out_7_re;
  logic [10:0] fp_out_4_fp_out_8_qs;
  logic fp_out_4_fp_out_8_re;
  logic [10:0] fp_out_4_fp_out_9_qs;
  logic fp_out_4_fp_out_9_re;
  logic [10:0] fp_out_5_fp_out_10_qs;
  logic fp_out_5_fp_out_10_re;
  logic [10:0] fp_out_5_fp_out_11_qs;
  logic fp_out_5_fp_out_11_re;
  logic [10:0] fp_out_6_fp_out_12_qs;
  logic fp_out_6_fp_out_12_re;
  logic [10:0] fp_out_6_fp_out_13_qs;
  logic fp_out_6_fp_out_13_re;
  logic [10:0] fp_out_7_fp_out_14_qs;
  logic fp_out_7_fp_out_14_re;
  logic [10:0] fp_out_7_fp_out_15_qs;
  logic fp_out_7_fp_out_15_re;
  logic [10:0] fp_out_8_fp_out_16_qs;
  logic fp_out_8_fp_out_16_re;
  logic [10:0] fp_out_8_fp_out_17_qs;
  logic fp_out_8_fp_out_17_re;
  logic [10:0] fp_out_9_fp_out_18_qs;
  logic fp_out_9_fp_out_18_re;
  logic [10:0] fp_out_9_fp_out_19_qs;
  logic fp_out_9_fp_out_19_re;
  logic [10:0] fp_out_10_fp_out_20_qs;
  logic fp_out_10_fp_out_20_re;
  logic [10:0] fp_out_10_fp_out_21_qs;
  logic fp_out_10_fp_out_21_re;
  logic [10:0] fp_out_11_fp_out_22_qs;
  logic fp_out_11_fp_out_22_re;
  logic [10:0] fp_out_11_fp_out_23_qs;
  logic fp_out_11_fp_out_23_re;
  logic [10:0] fp_out_12_fp_out_24_qs;
  logic fp_out_12_fp_out_24_re;
  logic [10:0] fp_out_12_fp_out_25_qs;
  logic fp_out_12_fp_out_25_re;
  logic [10:0] fp_out_13_fp_out_26_qs;
  logic fp_out_13_fp_out_26_re;
  logic [10:0] fp_out_13_fp_out_27_qs;
  logic fp_out_13_fp_out_27_re;
  logic [10:0] fp_out_14_fp_out_28_qs;
  logic fp_out_14_fp_out_28_re;
  logic [10:0] fp_out_14_fp_out_29_qs;
  logic fp_out_14_fp_out_29_re;
  logic [10:0] fp_out_15_fp_out_30_qs;
  logic fp_out_15_fp_out_30_re;
  logic [10:0] fp_out_15_fp_out_31_qs;
  logic fp_out_15_fp_out_31_re;
  logic [10:0] fp_out_16_fp_out_32_qs;
  logic fp_out_16_fp_out_32_re;
  logic [10:0] fp_out_16_fp_out_33_qs;
  logic fp_out_16_fp_out_33_re;
  logic [10:0] fp_out_17_fp_out_34_qs;
  logic fp_out_17_fp_out_34_re;
  logic [10:0] fp_out_17_fp_out_35_qs;
  logic fp_out_17_fp_out_35_re;
  logic [10:0] fp_out_18_fp_out_36_qs;
  logic fp_out_18_fp_out_36_re;
  logic [10:0] fp_out_18_fp_out_37_qs;
  logic fp_out_18_fp_out_37_re;
  logic [10:0] fp_out_19_fp_out_38_qs;
  logic fp_out_19_fp_out_38_re;
  logic [10:0] fp_out_19_fp_out_39_qs;
  logic fp_out_19_fp_out_39_re;
  logic [10:0] fp_out_20_fp_out_40_qs;
  logic fp_out_20_fp_out_40_re;
  logic [10:0] fp_out_20_fp_out_41_qs;
  logic fp_out_20_fp_out_41_re;
  logic [10:0] fp_out_21_fp_out_42_qs;
  logic fp_out_21_fp_out_42_re;
  logic [10:0] fp_out_21_fp_out_43_qs;
  logic fp_out_21_fp_out_43_re;
  logic [10:0] fp_out_22_fp_out_44_qs;
  logic fp_out_22_fp_out_44_re;
  logic [10:0] fp_out_22_fp_out_45_qs;
  logic fp_out_22_fp_out_45_re;
  logic [10:0] fp_out_23_fp_out_46_qs;
  logic fp_out_23_fp_out_46_re;
  logic [10:0] fp_out_23_fp_out_47_qs;
  logic fp_out_23_fp_out_47_re;
  logic [10:0] fp_out_24_fp_out_48_qs;
  logic fp_out_24_fp_out_48_re;
  logic [10:0] fp_out_24_fp_out_49_qs;
  logic fp_out_24_fp_out_49_re;
  logic [10:0] fp_out_25_fp_out_50_qs;
  logic fp_out_25_fp_out_50_re;
  logic [10:0] fp_out_25_fp_out_51_qs;
  logic fp_out_25_fp_out_51_re;
  logic [10:0] fp_out_26_fp_out_52_qs;
  logic fp_out_26_fp_out_52_re;
  logic [10:0] fp_out_26_fp_out_53_qs;
  logic fp_out_26_fp_out_53_re;
  logic [10:0] fp_out_27_fp_out_54_qs;
  logic fp_out_27_fp_out_54_re;
  logic [10:0] fp_out_27_fp_out_55_qs;
  logic fp_out_27_fp_out_55_re;
  logic [10:0] fp_out_28_fp_out_56_qs;
  logic fp_out_28_fp_out_56_re;
  logic [10:0] fp_out_28_fp_out_57_qs;
  logic fp_out_28_fp_out_57_re;
  logic [10:0] fp_out_29_fp_out_58_qs;
  logic fp_out_29_fp_out_58_re;
  logic [10:0] fp_out_29_fp_out_59_qs;
  logic fp_out_29_fp_out_59_re;
  logic [10:0] fp_out_30_fp_out_60_qs;
  logic fp_out_30_fp_out_60_re;
  logic [10:0] fp_out_30_fp_out_61_qs;
  logic fp_out_30_fp_out_61_re;
  logic [10:0] fp_out_31_fp_out_62_qs;
  logic fp_out_31_fp_out_62_re;
  logic [10:0] fp_out_31_fp_out_63_qs;
  logic fp_out_31_fp_out_63_re;
  logic [10:0] fp_out_32_fp_out_64_qs;
  logic fp_out_32_fp_out_64_re;
  logic [10:0] fp_out_32_fp_out_65_qs;
  logic fp_out_32_fp_out_65_re;
  logic [10:0] fp_out_33_fp_out_66_qs;
  logic fp_out_33_fp_out_66_re;
  logic [10:0] fp_out_33_fp_out_67_qs;
  logic fp_out_33_fp_out_67_re;
  logic [10:0] fp_out_34_fp_out_68_qs;
  logic fp_out_34_fp_out_68_re;
  logic [10:0] fp_out_34_fp_out_69_qs;
  logic fp_out_34_fp_out_69_re;
  logic [10:0] fp_out_35_fp_out_70_qs;
  logic fp_out_35_fp_out_70_re;
  logic [10:0] fp_out_35_fp_out_71_qs;
  logic fp_out_35_fp_out_71_re;
  logic [10:0] fp_out_36_fp_out_72_qs;
  logic fp_out_36_fp_out_72_re;
  logic [10:0] fp_out_36_fp_out_73_qs;
  logic fp_out_36_fp_out_73_re;
  logic [10:0] fp_out_37_fp_out_74_qs;
  logic fp_out_37_fp_out_74_re;
  logic [10:0] fp_out_37_fp_out_75_qs;
  logic fp_out_37_fp_out_75_re;
  logic [10:0] fp_out_38_fp_out_76_qs;
  logic fp_out_38_fp_out_76_re;
  logic [10:0] fp_out_38_fp_out_77_qs;
  logic fp_out_38_fp_out_77_re;
  logic [10:0] fp_out_39_fp_out_78_qs;
  logic fp_out_39_fp_out_78_re;
  logic [10:0] fp_out_39_fp_out_79_qs;
  logic fp_out_39_fp_out_79_re;
  logic [10:0] fp_out_40_fp_out_80_qs;
  logic fp_out_40_fp_out_80_re;
  logic [10:0] fp_out_40_fp_out_81_qs;
  logic fp_out_40_fp_out_81_re;
  logic [10:0] fp_out_41_fp_out_82_qs;
  logic fp_out_41_fp_out_82_re;
  logic [10:0] fp_out_41_fp_out_83_qs;
  logic fp_out_41_fp_out_83_re;
  logic [10:0] fp_out_42_fp_out_84_qs;
  logic fp_out_42_fp_out_84_re;
  logic [10:0] fp_out_42_fp_out_85_qs;
  logic fp_out_42_fp_out_85_re;
  logic [10:0] fp_out_43_fp_out_86_qs;
  logic fp_out_43_fp_out_86_re;
  logic [10:0] fp_out_43_fp_out_87_qs;
  logic fp_out_43_fp_out_87_re;
  logic [10:0] fp_out_44_fp_out_88_qs;
  logic fp_out_44_fp_out_88_re;
  logic [10:0] fp_out_44_fp_out_89_qs;
  logic fp_out_44_fp_out_89_re;
  logic [10:0] fp_out_45_fp_out_90_qs;
  logic fp_out_45_fp_out_90_re;
  logic [10:0] fp_out_45_fp_out_91_qs;
  logic fp_out_45_fp_out_91_re;
  logic [10:0] fp_out_46_fp_out_92_qs;
  logic fp_out_46_fp_out_92_re;
  logic [10:0] fp_out_46_fp_out_93_qs;
  logic fp_out_46_fp_out_93_re;
  logic [10:0] fp_out_47_fp_out_94_qs;
  logic fp_out_47_fp_out_94_re;
  logic [10:0] fp_out_47_fp_out_95_qs;
  logic fp_out_47_fp_out_95_re;

  // Register instances
  // R[feature_map]: V(False)

  //   F[width]: 6:0
  prim_subreg #(
    .DW      (7),
    .SWACCESS("WO"),
    .RESVAL  (7'h0)
  ) u_feature_map_width (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (feature_map_width_we),
    .wd     (feature_map_width_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.feature_map.width.q ),

    .qs     ()
  );


  //   F[height]: 14:8
  prim_subreg #(
    .DW      (7),
    .SWACCESS("WO"),
    .RESVAL  (7'h0)
  ) u_feature_map_height (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (feature_map_height_we),
    .wd     (feature_map_height_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.feature_map.height.q ),

    .qs     ()
  );


  //   F[n_i]: 23:16
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_feature_map_n_i (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (feature_map_n_i_we),
    .wd     (feature_map_n_i_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.feature_map.n_i.q ),

    .qs     ()
  );


  //   F[n_o]: 31:24
  prim_subreg #(
    .DW      (8),
    .SWACCESS("WO"),
    .RESVAL  (8'h0)
  ) u_feature_map_n_o (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (feature_map_n_o_we),
    .wd     (feature_map_n_o_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.feature_map.n_o.q ),

    .qs     ()
  );


  // R[tcn]: V(False)

  //   F[is_tcn]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_tcn_is_tcn (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tcn_is_tcn_we),
    .wd     (tcn_is_tcn_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tcn.is_tcn.q ),

    .qs     ()
  );


  //   F[tcn_width]: 12:8
  prim_subreg #(
    .DW      (5),
    .SWACCESS("WO"),
    .RESVAL  (5'h0)
  ) u_tcn_tcn_width (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tcn_tcn_width_we),
    .wd     (tcn_tcn_width_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tcn.tcn_width.q ),

    .qs     ()
  );


  //   F[tcn_width_mod_dil]: 20:16
  prim_subreg #(
    .DW      (5),
    .SWACCESS("WO"),
    .RESVAL  (5'h0)
  ) u_tcn_tcn_width_mod_dil (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tcn_tcn_width_mod_dil_we),
    .wd     (tcn_tcn_width_mod_dil_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tcn.tcn_width_mod_dil.q ),

    .qs     ()
  );


  //   F[tcn_k]: 25:24
  prim_subreg #(
    .DW      (2),
    .SWACCESS("WO"),
    .RESVAL  (2'h0)
  ) u_tcn_tcn_k (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (tcn_tcn_k_we),
    .wd     (tcn_tcn_k_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.tcn.tcn_k.q ),

    .qs     ()
  );


  // R[kernel]: V(False)

  //   F[k]: 2:0
  prim_subreg #(
    .DW      (3),
    .SWACCESS("WO"),
    .RESVAL  (3'h0)
  ) u_kernel_k (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (kernel_k_we),
    .wd     (kernel_k_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.kernel.k.q ),

    .qs     ()
  );


  //   F[padding]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_kernel_padding (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (kernel_padding_we),
    .wd     (kernel_padding_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.kernel.padding.q ),

    .qs     ()
  );


  //   F[stride_w]: 17:16
  prim_subreg #(
    .DW      (2),
    .SWACCESS("WO"),
    .RESVAL  (2'h0)
  ) u_kernel_stride_w (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (kernel_stride_w_we),
    .wd     (kernel_stride_w_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.kernel.stride_w.q ),

    .qs     ()
  );


  //   F[stride_h]: 25:24
  prim_subreg #(
    .DW      (2),
    .SWACCESS("WO"),
    .RESVAL  (2'h0)
  ) u_kernel_stride_h (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (kernel_stride_h_we),
    .wd     (kernel_stride_h_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.kernel.stride_h.q ),

    .qs     ()
  );


  // R[pooling]: V(False)

  //   F[en]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_pooling_en (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pooling_en_we),
    .wd     (pooling_en_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pooling.en.q ),

    .qs     ()
  );


  //   F[p_type]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_pooling_p_type (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pooling_p_type_we),
    .wd     (pooling_p_type_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pooling.p_type.q ),

    .qs     ()
  );


  //   F[kernel]: 17:16
  prim_subreg #(
    .DW      (2),
    .SWACCESS("WO"),
    .RESVAL  (2'h0)
  ) u_pooling_kernel (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pooling_kernel_we),
    .wd     (pooling_kernel_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pooling.kernel.q ),

    .qs     ()
  );


  //   F[padding]: 24:24
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_pooling_padding (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (pooling_padding_we),
    .wd     (pooling_padding_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.pooling.padding.q ),

    .qs     ()
  );


  // R[thresholds]: V(False)

  //   F[th_low]: 10:0
  prim_subreg #(
    .DW      (11),
    .SWACCESS("WO"),
    .RESVAL  (11'h0)
  ) u_thresholds_th_low (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (thresholds_th_low_we),
    .wd     (thresholds_th_low_wd),

    // from internal hardware
    .de     (hw2reg.thresholds.th_low.de),
    .d      (hw2reg.thresholds.th_low.d ),

    // to internal hardware
    .qe     (reg2hw.thresholds.th_low.qe),
    .q      (reg2hw.thresholds.th_low.q ),

    .qs     ()
  );


  //   F[th_high]: 26:16
  prim_subreg #(
    .DW      (11),
    .SWACCESS("WO"),
    .RESVAL  (11'h0)
  ) u_thresholds_th_high (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (thresholds_th_high_we),
    .wd     (thresholds_th_high_wd),

    // from internal hardware
    .de     (hw2reg.thresholds.th_high.de),
    .d      (hw2reg.thresholds.th_high.d ),

    // to internal hardware
    .qe     (reg2hw.thresholds.th_high.qe),
    .q      (reg2hw.thresholds.th_high.q ),

    .qs     ()
  );


  // R[ctrl1]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_ctrl1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl1_we),
    .wd     (ctrl1_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl1.q ),

    .qs     ()
  );


  // R[ctrl2]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h1)
  ) u_ctrl2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl2_we),
    .wd     (ctrl2_wd),

    // from internal hardware
    .de     (hw2reg.ctrl2.de),
    .d      (hw2reg.ctrl2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.ctrl2.q ),

    // to register interface (read)
    .qs     (ctrl2_qs)
  );


  // R[ctrl3]: V(False)

  prim_subreg #(
    .DW      (1),
    .SWACCESS("RW"),
    .RESVAL  (1'h0)
  ) u_ctrl3 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (ctrl3_we),
    .wd     (ctrl3_wd),

    // from internal hardware
    .de     (hw2reg.ctrl3.de),
    .d      (hw2reg.ctrl3.d ),

    // to internal hardware
    .qe     (),
    .q      (),

    // to register interface (read)
    .qs     (ctrl3_qs)
  );



  // Subregister 0 of Multireg fp_out
  // R[fp_out_0]: V(True)

  // F[fp_out_0]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_0_fp_out_0 (
    .re     (fp_out_0_fp_out_0_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[0].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_0_fp_out_0_qs)
  );


  // F[fp_out_1]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_0_fp_out_1 (
    .re     (fp_out_0_fp_out_1_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[1].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_0_fp_out_1_qs)
  );


  // Subregister 2 of Multireg fp_out
  // R[fp_out_1]: V(True)

  // F[fp_out_2]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_1_fp_out_2 (
    .re     (fp_out_1_fp_out_2_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[2].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_1_fp_out_2_qs)
  );


  // F[fp_out_3]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_1_fp_out_3 (
    .re     (fp_out_1_fp_out_3_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[3].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_1_fp_out_3_qs)
  );


  // Subregister 4 of Multireg fp_out
  // R[fp_out_2]: V(True)

  // F[fp_out_4]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_2_fp_out_4 (
    .re     (fp_out_2_fp_out_4_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[4].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_2_fp_out_4_qs)
  );


  // F[fp_out_5]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_2_fp_out_5 (
    .re     (fp_out_2_fp_out_5_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[5].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_2_fp_out_5_qs)
  );


  // Subregister 6 of Multireg fp_out
  // R[fp_out_3]: V(True)

  // F[fp_out_6]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_3_fp_out_6 (
    .re     (fp_out_3_fp_out_6_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[6].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_3_fp_out_6_qs)
  );


  // F[fp_out_7]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_3_fp_out_7 (
    .re     (fp_out_3_fp_out_7_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[7].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_3_fp_out_7_qs)
  );


  // Subregister 8 of Multireg fp_out
  // R[fp_out_4]: V(True)

  // F[fp_out_8]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_4_fp_out_8 (
    .re     (fp_out_4_fp_out_8_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[8].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_4_fp_out_8_qs)
  );


  // F[fp_out_9]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_4_fp_out_9 (
    .re     (fp_out_4_fp_out_9_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[9].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_4_fp_out_9_qs)
  );


  // Subregister 10 of Multireg fp_out
  // R[fp_out_5]: V(True)

  // F[fp_out_10]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_5_fp_out_10 (
    .re     (fp_out_5_fp_out_10_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[10].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_5_fp_out_10_qs)
  );


  // F[fp_out_11]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_5_fp_out_11 (
    .re     (fp_out_5_fp_out_11_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[11].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_5_fp_out_11_qs)
  );


  // Subregister 12 of Multireg fp_out
  // R[fp_out_6]: V(True)

  // F[fp_out_12]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_6_fp_out_12 (
    .re     (fp_out_6_fp_out_12_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[12].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_6_fp_out_12_qs)
  );


  // F[fp_out_13]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_6_fp_out_13 (
    .re     (fp_out_6_fp_out_13_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[13].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_6_fp_out_13_qs)
  );


  // Subregister 14 of Multireg fp_out
  // R[fp_out_7]: V(True)

  // F[fp_out_14]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_7_fp_out_14 (
    .re     (fp_out_7_fp_out_14_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[14].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_7_fp_out_14_qs)
  );


  // F[fp_out_15]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_7_fp_out_15 (
    .re     (fp_out_7_fp_out_15_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[15].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_7_fp_out_15_qs)
  );


  // Subregister 16 of Multireg fp_out
  // R[fp_out_8]: V(True)

  // F[fp_out_16]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_8_fp_out_16 (
    .re     (fp_out_8_fp_out_16_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[16].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_8_fp_out_16_qs)
  );


  // F[fp_out_17]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_8_fp_out_17 (
    .re     (fp_out_8_fp_out_17_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[17].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_8_fp_out_17_qs)
  );


  // Subregister 18 of Multireg fp_out
  // R[fp_out_9]: V(True)

  // F[fp_out_18]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_9_fp_out_18 (
    .re     (fp_out_9_fp_out_18_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[18].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_9_fp_out_18_qs)
  );


  // F[fp_out_19]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_9_fp_out_19 (
    .re     (fp_out_9_fp_out_19_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[19].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_9_fp_out_19_qs)
  );


  // Subregister 20 of Multireg fp_out
  // R[fp_out_10]: V(True)

  // F[fp_out_20]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_10_fp_out_20 (
    .re     (fp_out_10_fp_out_20_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[20].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_10_fp_out_20_qs)
  );


  // F[fp_out_21]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_10_fp_out_21 (
    .re     (fp_out_10_fp_out_21_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[21].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_10_fp_out_21_qs)
  );


  // Subregister 22 of Multireg fp_out
  // R[fp_out_11]: V(True)

  // F[fp_out_22]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_11_fp_out_22 (
    .re     (fp_out_11_fp_out_22_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[22].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_11_fp_out_22_qs)
  );


  // F[fp_out_23]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_11_fp_out_23 (
    .re     (fp_out_11_fp_out_23_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[23].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_11_fp_out_23_qs)
  );


  // Subregister 24 of Multireg fp_out
  // R[fp_out_12]: V(True)

  // F[fp_out_24]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_12_fp_out_24 (
    .re     (fp_out_12_fp_out_24_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[24].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_12_fp_out_24_qs)
  );


  // F[fp_out_25]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_12_fp_out_25 (
    .re     (fp_out_12_fp_out_25_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[25].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_12_fp_out_25_qs)
  );


  // Subregister 26 of Multireg fp_out
  // R[fp_out_13]: V(True)

  // F[fp_out_26]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_13_fp_out_26 (
    .re     (fp_out_13_fp_out_26_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[26].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_13_fp_out_26_qs)
  );


  // F[fp_out_27]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_13_fp_out_27 (
    .re     (fp_out_13_fp_out_27_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[27].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_13_fp_out_27_qs)
  );


  // Subregister 28 of Multireg fp_out
  // R[fp_out_14]: V(True)

  // F[fp_out_28]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_14_fp_out_28 (
    .re     (fp_out_14_fp_out_28_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[28].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_14_fp_out_28_qs)
  );


  // F[fp_out_29]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_14_fp_out_29 (
    .re     (fp_out_14_fp_out_29_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[29].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_14_fp_out_29_qs)
  );


  // Subregister 30 of Multireg fp_out
  // R[fp_out_15]: V(True)

  // F[fp_out_30]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_15_fp_out_30 (
    .re     (fp_out_15_fp_out_30_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[30].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_15_fp_out_30_qs)
  );


  // F[fp_out_31]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_15_fp_out_31 (
    .re     (fp_out_15_fp_out_31_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[31].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_15_fp_out_31_qs)
  );


  // Subregister 32 of Multireg fp_out
  // R[fp_out_16]: V(True)

  // F[fp_out_32]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_16_fp_out_32 (
    .re     (fp_out_16_fp_out_32_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[32].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_16_fp_out_32_qs)
  );


  // F[fp_out_33]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_16_fp_out_33 (
    .re     (fp_out_16_fp_out_33_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[33].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_16_fp_out_33_qs)
  );


  // Subregister 34 of Multireg fp_out
  // R[fp_out_17]: V(True)

  // F[fp_out_34]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_17_fp_out_34 (
    .re     (fp_out_17_fp_out_34_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[34].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_17_fp_out_34_qs)
  );


  // F[fp_out_35]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_17_fp_out_35 (
    .re     (fp_out_17_fp_out_35_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[35].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_17_fp_out_35_qs)
  );


  // Subregister 36 of Multireg fp_out
  // R[fp_out_18]: V(True)

  // F[fp_out_36]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_18_fp_out_36 (
    .re     (fp_out_18_fp_out_36_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[36].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_18_fp_out_36_qs)
  );


  // F[fp_out_37]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_18_fp_out_37 (
    .re     (fp_out_18_fp_out_37_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[37].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_18_fp_out_37_qs)
  );


  // Subregister 38 of Multireg fp_out
  // R[fp_out_19]: V(True)

  // F[fp_out_38]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_19_fp_out_38 (
    .re     (fp_out_19_fp_out_38_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[38].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_19_fp_out_38_qs)
  );


  // F[fp_out_39]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_19_fp_out_39 (
    .re     (fp_out_19_fp_out_39_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[39].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_19_fp_out_39_qs)
  );


  // Subregister 40 of Multireg fp_out
  // R[fp_out_20]: V(True)

  // F[fp_out_40]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_20_fp_out_40 (
    .re     (fp_out_20_fp_out_40_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[40].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_20_fp_out_40_qs)
  );


  // F[fp_out_41]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_20_fp_out_41 (
    .re     (fp_out_20_fp_out_41_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[41].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_20_fp_out_41_qs)
  );


  // Subregister 42 of Multireg fp_out
  // R[fp_out_21]: V(True)

  // F[fp_out_42]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_21_fp_out_42 (
    .re     (fp_out_21_fp_out_42_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[42].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_21_fp_out_42_qs)
  );


  // F[fp_out_43]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_21_fp_out_43 (
    .re     (fp_out_21_fp_out_43_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[43].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_21_fp_out_43_qs)
  );


  // Subregister 44 of Multireg fp_out
  // R[fp_out_22]: V(True)

  // F[fp_out_44]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_22_fp_out_44 (
    .re     (fp_out_22_fp_out_44_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[44].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_22_fp_out_44_qs)
  );


  // F[fp_out_45]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_22_fp_out_45 (
    .re     (fp_out_22_fp_out_45_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[45].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_22_fp_out_45_qs)
  );


  // Subregister 46 of Multireg fp_out
  // R[fp_out_23]: V(True)

  // F[fp_out_46]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_23_fp_out_46 (
    .re     (fp_out_23_fp_out_46_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[46].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_23_fp_out_46_qs)
  );


  // F[fp_out_47]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_23_fp_out_47 (
    .re     (fp_out_23_fp_out_47_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[47].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_23_fp_out_47_qs)
  );


  // Subregister 48 of Multireg fp_out
  // R[fp_out_24]: V(True)

  // F[fp_out_48]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_24_fp_out_48 (
    .re     (fp_out_24_fp_out_48_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[48].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_24_fp_out_48_qs)
  );


  // F[fp_out_49]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_24_fp_out_49 (
    .re     (fp_out_24_fp_out_49_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[49].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_24_fp_out_49_qs)
  );


  // Subregister 50 of Multireg fp_out
  // R[fp_out_25]: V(True)

  // F[fp_out_50]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_25_fp_out_50 (
    .re     (fp_out_25_fp_out_50_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[50].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_25_fp_out_50_qs)
  );


  // F[fp_out_51]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_25_fp_out_51 (
    .re     (fp_out_25_fp_out_51_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[51].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_25_fp_out_51_qs)
  );


  // Subregister 52 of Multireg fp_out
  // R[fp_out_26]: V(True)

  // F[fp_out_52]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_26_fp_out_52 (
    .re     (fp_out_26_fp_out_52_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[52].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_26_fp_out_52_qs)
  );


  // F[fp_out_53]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_26_fp_out_53 (
    .re     (fp_out_26_fp_out_53_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[53].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_26_fp_out_53_qs)
  );


  // Subregister 54 of Multireg fp_out
  // R[fp_out_27]: V(True)

  // F[fp_out_54]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_27_fp_out_54 (
    .re     (fp_out_27_fp_out_54_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[54].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_27_fp_out_54_qs)
  );


  // F[fp_out_55]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_27_fp_out_55 (
    .re     (fp_out_27_fp_out_55_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[55].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_27_fp_out_55_qs)
  );


  // Subregister 56 of Multireg fp_out
  // R[fp_out_28]: V(True)

  // F[fp_out_56]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_28_fp_out_56 (
    .re     (fp_out_28_fp_out_56_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[56].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_28_fp_out_56_qs)
  );


  // F[fp_out_57]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_28_fp_out_57 (
    .re     (fp_out_28_fp_out_57_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[57].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_28_fp_out_57_qs)
  );


  // Subregister 58 of Multireg fp_out
  // R[fp_out_29]: V(True)

  // F[fp_out_58]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_29_fp_out_58 (
    .re     (fp_out_29_fp_out_58_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[58].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_29_fp_out_58_qs)
  );


  // F[fp_out_59]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_29_fp_out_59 (
    .re     (fp_out_29_fp_out_59_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[59].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_29_fp_out_59_qs)
  );


  // Subregister 60 of Multireg fp_out
  // R[fp_out_30]: V(True)

  // F[fp_out_60]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_30_fp_out_60 (
    .re     (fp_out_30_fp_out_60_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[60].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_30_fp_out_60_qs)
  );


  // F[fp_out_61]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_30_fp_out_61 (
    .re     (fp_out_30_fp_out_61_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[61].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_30_fp_out_61_qs)
  );


  // Subregister 62 of Multireg fp_out
  // R[fp_out_31]: V(True)

  // F[fp_out_62]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_31_fp_out_62 (
    .re     (fp_out_31_fp_out_62_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[62].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_31_fp_out_62_qs)
  );


  // F[fp_out_63]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_31_fp_out_63 (
    .re     (fp_out_31_fp_out_63_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[63].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_31_fp_out_63_qs)
  );


  // Subregister 64 of Multireg fp_out
  // R[fp_out_32]: V(True)

  // F[fp_out_64]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_32_fp_out_64 (
    .re     (fp_out_32_fp_out_64_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[64].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_32_fp_out_64_qs)
  );


  // F[fp_out_65]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_32_fp_out_65 (
    .re     (fp_out_32_fp_out_65_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[65].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_32_fp_out_65_qs)
  );


  // Subregister 66 of Multireg fp_out
  // R[fp_out_33]: V(True)

  // F[fp_out_66]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_33_fp_out_66 (
    .re     (fp_out_33_fp_out_66_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[66].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_33_fp_out_66_qs)
  );


  // F[fp_out_67]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_33_fp_out_67 (
    .re     (fp_out_33_fp_out_67_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[67].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_33_fp_out_67_qs)
  );


  // Subregister 68 of Multireg fp_out
  // R[fp_out_34]: V(True)

  // F[fp_out_68]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_34_fp_out_68 (
    .re     (fp_out_34_fp_out_68_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[68].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_34_fp_out_68_qs)
  );


  // F[fp_out_69]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_34_fp_out_69 (
    .re     (fp_out_34_fp_out_69_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[69].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_34_fp_out_69_qs)
  );


  // Subregister 70 of Multireg fp_out
  // R[fp_out_35]: V(True)

  // F[fp_out_70]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_35_fp_out_70 (
    .re     (fp_out_35_fp_out_70_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[70].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_35_fp_out_70_qs)
  );


  // F[fp_out_71]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_35_fp_out_71 (
    .re     (fp_out_35_fp_out_71_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[71].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_35_fp_out_71_qs)
  );


  // Subregister 72 of Multireg fp_out
  // R[fp_out_36]: V(True)

  // F[fp_out_72]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_36_fp_out_72 (
    .re     (fp_out_36_fp_out_72_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[72].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_36_fp_out_72_qs)
  );


  // F[fp_out_73]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_36_fp_out_73 (
    .re     (fp_out_36_fp_out_73_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[73].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_36_fp_out_73_qs)
  );


  // Subregister 74 of Multireg fp_out
  // R[fp_out_37]: V(True)

  // F[fp_out_74]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_37_fp_out_74 (
    .re     (fp_out_37_fp_out_74_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[74].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_37_fp_out_74_qs)
  );


  // F[fp_out_75]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_37_fp_out_75 (
    .re     (fp_out_37_fp_out_75_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[75].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_37_fp_out_75_qs)
  );


  // Subregister 76 of Multireg fp_out
  // R[fp_out_38]: V(True)

  // F[fp_out_76]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_38_fp_out_76 (
    .re     (fp_out_38_fp_out_76_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[76].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_38_fp_out_76_qs)
  );


  // F[fp_out_77]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_38_fp_out_77 (
    .re     (fp_out_38_fp_out_77_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[77].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_38_fp_out_77_qs)
  );


  // Subregister 78 of Multireg fp_out
  // R[fp_out_39]: V(True)

  // F[fp_out_78]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_39_fp_out_78 (
    .re     (fp_out_39_fp_out_78_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[78].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_39_fp_out_78_qs)
  );


  // F[fp_out_79]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_39_fp_out_79 (
    .re     (fp_out_39_fp_out_79_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[79].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_39_fp_out_79_qs)
  );


  // Subregister 80 of Multireg fp_out
  // R[fp_out_40]: V(True)

  // F[fp_out_80]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_40_fp_out_80 (
    .re     (fp_out_40_fp_out_80_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[80].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_40_fp_out_80_qs)
  );


  // F[fp_out_81]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_40_fp_out_81 (
    .re     (fp_out_40_fp_out_81_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[81].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_40_fp_out_81_qs)
  );


  // Subregister 82 of Multireg fp_out
  // R[fp_out_41]: V(True)

  // F[fp_out_82]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_41_fp_out_82 (
    .re     (fp_out_41_fp_out_82_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[82].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_41_fp_out_82_qs)
  );


  // F[fp_out_83]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_41_fp_out_83 (
    .re     (fp_out_41_fp_out_83_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[83].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_41_fp_out_83_qs)
  );


  // Subregister 84 of Multireg fp_out
  // R[fp_out_42]: V(True)

  // F[fp_out_84]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_42_fp_out_84 (
    .re     (fp_out_42_fp_out_84_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[84].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_42_fp_out_84_qs)
  );


  // F[fp_out_85]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_42_fp_out_85 (
    .re     (fp_out_42_fp_out_85_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[85].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_42_fp_out_85_qs)
  );


  // Subregister 86 of Multireg fp_out
  // R[fp_out_43]: V(True)

  // F[fp_out_86]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_43_fp_out_86 (
    .re     (fp_out_43_fp_out_86_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[86].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_43_fp_out_86_qs)
  );


  // F[fp_out_87]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_43_fp_out_87 (
    .re     (fp_out_43_fp_out_87_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[87].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_43_fp_out_87_qs)
  );


  // Subregister 88 of Multireg fp_out
  // R[fp_out_44]: V(True)

  // F[fp_out_88]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_44_fp_out_88 (
    .re     (fp_out_44_fp_out_88_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[88].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_44_fp_out_88_qs)
  );


  // F[fp_out_89]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_44_fp_out_89 (
    .re     (fp_out_44_fp_out_89_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[89].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_44_fp_out_89_qs)
  );


  // Subregister 90 of Multireg fp_out
  // R[fp_out_45]: V(True)

  // F[fp_out_90]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_45_fp_out_90 (
    .re     (fp_out_45_fp_out_90_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[90].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_45_fp_out_90_qs)
  );


  // F[fp_out_91]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_45_fp_out_91 (
    .re     (fp_out_45_fp_out_91_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[91].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_45_fp_out_91_qs)
  );


  // Subregister 92 of Multireg fp_out
  // R[fp_out_46]: V(True)

  // F[fp_out_92]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_46_fp_out_92 (
    .re     (fp_out_46_fp_out_92_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[92].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_46_fp_out_92_qs)
  );


  // F[fp_out_93]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_46_fp_out_93 (
    .re     (fp_out_46_fp_out_93_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[93].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_46_fp_out_93_qs)
  );


  // Subregister 94 of Multireg fp_out
  // R[fp_out_47]: V(True)

  // F[fp_out_94]: 10:0
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_47_fp_out_94 (
    .re     (fp_out_47_fp_out_94_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[94].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_47_fp_out_94_qs)
  );


  // F[fp_out_95]: 21:11
  prim_subreg_ext #(
    .DW    (11)
  ) u_fp_out_47_fp_out_95 (
    .re     (fp_out_47_fp_out_95_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.fp_out[95].d),
    .qre    (),
    .qe     (),
    .q      (),
    .qs     (fp_out_47_fp_out_95_qs)
  );





  logic [55:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == LAYER_PARAMS_FEATURE_MAP_OFFSET);
    addr_hit[ 1] = (reg_addr == LAYER_PARAMS_TCN_OFFSET);
    addr_hit[ 2] = (reg_addr == LAYER_PARAMS_KERNEL_OFFSET);
    addr_hit[ 3] = (reg_addr == LAYER_PARAMS_POOLING_OFFSET);
    addr_hit[ 4] = (reg_addr == LAYER_PARAMS_THRESHOLDS_OFFSET);
    addr_hit[ 5] = (reg_addr == LAYER_PARAMS_CTRL1_OFFSET);
    addr_hit[ 6] = (reg_addr == LAYER_PARAMS_CTRL2_OFFSET);
    addr_hit[ 7] = (reg_addr == LAYER_PARAMS_CTRL3_OFFSET);
    addr_hit[ 8] = (reg_addr == LAYER_PARAMS_FP_OUT_0_OFFSET);
    addr_hit[ 9] = (reg_addr == LAYER_PARAMS_FP_OUT_1_OFFSET);
    addr_hit[10] = (reg_addr == LAYER_PARAMS_FP_OUT_2_OFFSET);
    addr_hit[11] = (reg_addr == LAYER_PARAMS_FP_OUT_3_OFFSET);
    addr_hit[12] = (reg_addr == LAYER_PARAMS_FP_OUT_4_OFFSET);
    addr_hit[13] = (reg_addr == LAYER_PARAMS_FP_OUT_5_OFFSET);
    addr_hit[14] = (reg_addr == LAYER_PARAMS_FP_OUT_6_OFFSET);
    addr_hit[15] = (reg_addr == LAYER_PARAMS_FP_OUT_7_OFFSET);
    addr_hit[16] = (reg_addr == LAYER_PARAMS_FP_OUT_8_OFFSET);
    addr_hit[17] = (reg_addr == LAYER_PARAMS_FP_OUT_9_OFFSET);
    addr_hit[18] = (reg_addr == LAYER_PARAMS_FP_OUT_10_OFFSET);
    addr_hit[19] = (reg_addr == LAYER_PARAMS_FP_OUT_11_OFFSET);
    addr_hit[20] = (reg_addr == LAYER_PARAMS_FP_OUT_12_OFFSET);
    addr_hit[21] = (reg_addr == LAYER_PARAMS_FP_OUT_13_OFFSET);
    addr_hit[22] = (reg_addr == LAYER_PARAMS_FP_OUT_14_OFFSET);
    addr_hit[23] = (reg_addr == LAYER_PARAMS_FP_OUT_15_OFFSET);
    addr_hit[24] = (reg_addr == LAYER_PARAMS_FP_OUT_16_OFFSET);
    addr_hit[25] = (reg_addr == LAYER_PARAMS_FP_OUT_17_OFFSET);
    addr_hit[26] = (reg_addr == LAYER_PARAMS_FP_OUT_18_OFFSET);
    addr_hit[27] = (reg_addr == LAYER_PARAMS_FP_OUT_19_OFFSET);
    addr_hit[28] = (reg_addr == LAYER_PARAMS_FP_OUT_20_OFFSET);
    addr_hit[29] = (reg_addr == LAYER_PARAMS_FP_OUT_21_OFFSET);
    addr_hit[30] = (reg_addr == LAYER_PARAMS_FP_OUT_22_OFFSET);
    addr_hit[31] = (reg_addr == LAYER_PARAMS_FP_OUT_23_OFFSET);
    addr_hit[32] = (reg_addr == LAYER_PARAMS_FP_OUT_24_OFFSET);
    addr_hit[33] = (reg_addr == LAYER_PARAMS_FP_OUT_25_OFFSET);
    addr_hit[34] = (reg_addr == LAYER_PARAMS_FP_OUT_26_OFFSET);
    addr_hit[35] = (reg_addr == LAYER_PARAMS_FP_OUT_27_OFFSET);
    addr_hit[36] = (reg_addr == LAYER_PARAMS_FP_OUT_28_OFFSET);
    addr_hit[37] = (reg_addr == LAYER_PARAMS_FP_OUT_29_OFFSET);
    addr_hit[38] = (reg_addr == LAYER_PARAMS_FP_OUT_30_OFFSET);
    addr_hit[39] = (reg_addr == LAYER_PARAMS_FP_OUT_31_OFFSET);
    addr_hit[40] = (reg_addr == LAYER_PARAMS_FP_OUT_32_OFFSET);
    addr_hit[41] = (reg_addr == LAYER_PARAMS_FP_OUT_33_OFFSET);
    addr_hit[42] = (reg_addr == LAYER_PARAMS_FP_OUT_34_OFFSET);
    addr_hit[43] = (reg_addr == LAYER_PARAMS_FP_OUT_35_OFFSET);
    addr_hit[44] = (reg_addr == LAYER_PARAMS_FP_OUT_36_OFFSET);
    addr_hit[45] = (reg_addr == LAYER_PARAMS_FP_OUT_37_OFFSET);
    addr_hit[46] = (reg_addr == LAYER_PARAMS_FP_OUT_38_OFFSET);
    addr_hit[47] = (reg_addr == LAYER_PARAMS_FP_OUT_39_OFFSET);
    addr_hit[48] = (reg_addr == LAYER_PARAMS_FP_OUT_40_OFFSET);
    addr_hit[49] = (reg_addr == LAYER_PARAMS_FP_OUT_41_OFFSET);
    addr_hit[50] = (reg_addr == LAYER_PARAMS_FP_OUT_42_OFFSET);
    addr_hit[51] = (reg_addr == LAYER_PARAMS_FP_OUT_43_OFFSET);
    addr_hit[52] = (reg_addr == LAYER_PARAMS_FP_OUT_44_OFFSET);
    addr_hit[53] = (reg_addr == LAYER_PARAMS_FP_OUT_45_OFFSET);
    addr_hit[54] = (reg_addr == LAYER_PARAMS_FP_OUT_46_OFFSET);
    addr_hit[55] = (reg_addr == LAYER_PARAMS_FP_OUT_47_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[ 0] && reg_we && (LAYER_PARAMS_PERMIT[ 0] != (LAYER_PARAMS_PERMIT[ 0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 1] && reg_we && (LAYER_PARAMS_PERMIT[ 1] != (LAYER_PARAMS_PERMIT[ 1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 2] && reg_we && (LAYER_PARAMS_PERMIT[ 2] != (LAYER_PARAMS_PERMIT[ 2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 3] && reg_we && (LAYER_PARAMS_PERMIT[ 3] != (LAYER_PARAMS_PERMIT[ 3] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 4] && reg_we && (LAYER_PARAMS_PERMIT[ 4] != (LAYER_PARAMS_PERMIT[ 4] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 5] && reg_we && (LAYER_PARAMS_PERMIT[ 5] != (LAYER_PARAMS_PERMIT[ 5] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 6] && reg_we && (LAYER_PARAMS_PERMIT[ 6] != (LAYER_PARAMS_PERMIT[ 6] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 7] && reg_we && (LAYER_PARAMS_PERMIT[ 7] != (LAYER_PARAMS_PERMIT[ 7] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 8] && reg_we && (LAYER_PARAMS_PERMIT[ 8] != (LAYER_PARAMS_PERMIT[ 8] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[ 9] && reg_we && (LAYER_PARAMS_PERMIT[ 9] != (LAYER_PARAMS_PERMIT[ 9] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[10] && reg_we && (LAYER_PARAMS_PERMIT[10] != (LAYER_PARAMS_PERMIT[10] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[11] && reg_we && (LAYER_PARAMS_PERMIT[11] != (LAYER_PARAMS_PERMIT[11] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[12] && reg_we && (LAYER_PARAMS_PERMIT[12] != (LAYER_PARAMS_PERMIT[12] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[13] && reg_we && (LAYER_PARAMS_PERMIT[13] != (LAYER_PARAMS_PERMIT[13] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[14] && reg_we && (LAYER_PARAMS_PERMIT[14] != (LAYER_PARAMS_PERMIT[14] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[15] && reg_we && (LAYER_PARAMS_PERMIT[15] != (LAYER_PARAMS_PERMIT[15] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[16] && reg_we && (LAYER_PARAMS_PERMIT[16] != (LAYER_PARAMS_PERMIT[16] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[17] && reg_we && (LAYER_PARAMS_PERMIT[17] != (LAYER_PARAMS_PERMIT[17] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[18] && reg_we && (LAYER_PARAMS_PERMIT[18] != (LAYER_PARAMS_PERMIT[18] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[19] && reg_we && (LAYER_PARAMS_PERMIT[19] != (LAYER_PARAMS_PERMIT[19] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[20] && reg_we && (LAYER_PARAMS_PERMIT[20] != (LAYER_PARAMS_PERMIT[20] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[21] && reg_we && (LAYER_PARAMS_PERMIT[21] != (LAYER_PARAMS_PERMIT[21] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[22] && reg_we && (LAYER_PARAMS_PERMIT[22] != (LAYER_PARAMS_PERMIT[22] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[23] && reg_we && (LAYER_PARAMS_PERMIT[23] != (LAYER_PARAMS_PERMIT[23] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[24] && reg_we && (LAYER_PARAMS_PERMIT[24] != (LAYER_PARAMS_PERMIT[24] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[25] && reg_we && (LAYER_PARAMS_PERMIT[25] != (LAYER_PARAMS_PERMIT[25] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[26] && reg_we && (LAYER_PARAMS_PERMIT[26] != (LAYER_PARAMS_PERMIT[26] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[27] && reg_we && (LAYER_PARAMS_PERMIT[27] != (LAYER_PARAMS_PERMIT[27] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[28] && reg_we && (LAYER_PARAMS_PERMIT[28] != (LAYER_PARAMS_PERMIT[28] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[29] && reg_we && (LAYER_PARAMS_PERMIT[29] != (LAYER_PARAMS_PERMIT[29] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[30] && reg_we && (LAYER_PARAMS_PERMIT[30] != (LAYER_PARAMS_PERMIT[30] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[31] && reg_we && (LAYER_PARAMS_PERMIT[31] != (LAYER_PARAMS_PERMIT[31] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[32] && reg_we && (LAYER_PARAMS_PERMIT[32] != (LAYER_PARAMS_PERMIT[32] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[33] && reg_we && (LAYER_PARAMS_PERMIT[33] != (LAYER_PARAMS_PERMIT[33] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[34] && reg_we && (LAYER_PARAMS_PERMIT[34] != (LAYER_PARAMS_PERMIT[34] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[35] && reg_we && (LAYER_PARAMS_PERMIT[35] != (LAYER_PARAMS_PERMIT[35] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[36] && reg_we && (LAYER_PARAMS_PERMIT[36] != (LAYER_PARAMS_PERMIT[36] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[37] && reg_we && (LAYER_PARAMS_PERMIT[37] != (LAYER_PARAMS_PERMIT[37] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[38] && reg_we && (LAYER_PARAMS_PERMIT[38] != (LAYER_PARAMS_PERMIT[38] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[39] && reg_we && (LAYER_PARAMS_PERMIT[39] != (LAYER_PARAMS_PERMIT[39] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[40] && reg_we && (LAYER_PARAMS_PERMIT[40] != (LAYER_PARAMS_PERMIT[40] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[41] && reg_we && (LAYER_PARAMS_PERMIT[41] != (LAYER_PARAMS_PERMIT[41] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[42] && reg_we && (LAYER_PARAMS_PERMIT[42] != (LAYER_PARAMS_PERMIT[42] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[43] && reg_we && (LAYER_PARAMS_PERMIT[43] != (LAYER_PARAMS_PERMIT[43] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[44] && reg_we && (LAYER_PARAMS_PERMIT[44] != (LAYER_PARAMS_PERMIT[44] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[45] && reg_we && (LAYER_PARAMS_PERMIT[45] != (LAYER_PARAMS_PERMIT[45] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[46] && reg_we && (LAYER_PARAMS_PERMIT[46] != (LAYER_PARAMS_PERMIT[46] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[47] && reg_we && (LAYER_PARAMS_PERMIT[47] != (LAYER_PARAMS_PERMIT[47] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[48] && reg_we && (LAYER_PARAMS_PERMIT[48] != (LAYER_PARAMS_PERMIT[48] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[49] && reg_we && (LAYER_PARAMS_PERMIT[49] != (LAYER_PARAMS_PERMIT[49] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[50] && reg_we && (LAYER_PARAMS_PERMIT[50] != (LAYER_PARAMS_PERMIT[50] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[51] && reg_we && (LAYER_PARAMS_PERMIT[51] != (LAYER_PARAMS_PERMIT[51] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[52] && reg_we && (LAYER_PARAMS_PERMIT[52] != (LAYER_PARAMS_PERMIT[52] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[53] && reg_we && (LAYER_PARAMS_PERMIT[53] != (LAYER_PARAMS_PERMIT[53] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[54] && reg_we && (LAYER_PARAMS_PERMIT[54] != (LAYER_PARAMS_PERMIT[54] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[55] && reg_we && (LAYER_PARAMS_PERMIT[55] != (LAYER_PARAMS_PERMIT[55] & reg_be))) wr_err = 1'b1 ;
  end

  assign feature_map_width_we = addr_hit[0] & reg_we & ~wr_err;
  assign feature_map_width_wd = reg_wdata[6:0];

  assign feature_map_height_we = addr_hit[0] & reg_we & ~wr_err;
  assign feature_map_height_wd = reg_wdata[14:8];

  assign feature_map_n_i_we = addr_hit[0] & reg_we & ~wr_err;
  assign feature_map_n_i_wd = reg_wdata[23:16];

  assign feature_map_n_o_we = addr_hit[0] & reg_we & ~wr_err;
  assign feature_map_n_o_wd = reg_wdata[31:24];

  assign tcn_is_tcn_we = addr_hit[1] & reg_we & ~wr_err;
  assign tcn_is_tcn_wd = reg_wdata[0];

  assign tcn_tcn_width_we = addr_hit[1] & reg_we & ~wr_err;
  assign tcn_tcn_width_wd = reg_wdata[12:8];

  assign tcn_tcn_width_mod_dil_we = addr_hit[1] & reg_we & ~wr_err;
  assign tcn_tcn_width_mod_dil_wd = reg_wdata[20:16];

  assign tcn_tcn_k_we = addr_hit[1] & reg_we & ~wr_err;
  assign tcn_tcn_k_wd = reg_wdata[25:24];

  assign kernel_k_we = addr_hit[2] & reg_we & ~wr_err;
  assign kernel_k_wd = reg_wdata[2:0];

  assign kernel_padding_we = addr_hit[2] & reg_we & ~wr_err;
  assign kernel_padding_wd = reg_wdata[8];

  assign kernel_stride_w_we = addr_hit[2] & reg_we & ~wr_err;
  assign kernel_stride_w_wd = reg_wdata[17:16];

  assign kernel_stride_h_we = addr_hit[2] & reg_we & ~wr_err;
  assign kernel_stride_h_wd = reg_wdata[25:24];

  assign pooling_en_we = addr_hit[3] & reg_we & ~wr_err;
  assign pooling_en_wd = reg_wdata[0];

  assign pooling_p_type_we = addr_hit[3] & reg_we & ~wr_err;
  assign pooling_p_type_wd = reg_wdata[8];

  assign pooling_kernel_we = addr_hit[3] & reg_we & ~wr_err;
  assign pooling_kernel_wd = reg_wdata[17:16];

  assign pooling_padding_we = addr_hit[3] & reg_we & ~wr_err;
  assign pooling_padding_wd = reg_wdata[24];

  assign thresholds_th_low_we = addr_hit[4] & reg_we & ~wr_err;
  assign thresholds_th_low_wd = reg_wdata[10:0];

  assign thresholds_th_high_we = addr_hit[4] & reg_we & ~wr_err;
  assign thresholds_th_high_wd = reg_wdata[26:16];

  assign ctrl1_we = addr_hit[5] & reg_we & ~wr_err;
  assign ctrl1_wd = reg_wdata[0];

  assign ctrl2_we = addr_hit[6] & reg_we & ~wr_err;
  assign ctrl2_wd = reg_wdata[0];

  assign ctrl3_we = addr_hit[7] & reg_we & ~wr_err;
  assign ctrl3_wd = reg_wdata[0];

  assign fp_out_0_fp_out_0_re = addr_hit[8] && reg_re;

  assign fp_out_0_fp_out_1_re = addr_hit[8] && reg_re;

  assign fp_out_1_fp_out_2_re = addr_hit[9] && reg_re;

  assign fp_out_1_fp_out_3_re = addr_hit[9] && reg_re;

  assign fp_out_2_fp_out_4_re = addr_hit[10] && reg_re;

  assign fp_out_2_fp_out_5_re = addr_hit[10] && reg_re;

  assign fp_out_3_fp_out_6_re = addr_hit[11] && reg_re;

  assign fp_out_3_fp_out_7_re = addr_hit[11] && reg_re;

  assign fp_out_4_fp_out_8_re = addr_hit[12] && reg_re;

  assign fp_out_4_fp_out_9_re = addr_hit[12] && reg_re;

  assign fp_out_5_fp_out_10_re = addr_hit[13] && reg_re;

  assign fp_out_5_fp_out_11_re = addr_hit[13] && reg_re;

  assign fp_out_6_fp_out_12_re = addr_hit[14] && reg_re;

  assign fp_out_6_fp_out_13_re = addr_hit[14] && reg_re;

  assign fp_out_7_fp_out_14_re = addr_hit[15] && reg_re;

  assign fp_out_7_fp_out_15_re = addr_hit[15] && reg_re;

  assign fp_out_8_fp_out_16_re = addr_hit[16] && reg_re;

  assign fp_out_8_fp_out_17_re = addr_hit[16] && reg_re;

  assign fp_out_9_fp_out_18_re = addr_hit[17] && reg_re;

  assign fp_out_9_fp_out_19_re = addr_hit[17] && reg_re;

  assign fp_out_10_fp_out_20_re = addr_hit[18] && reg_re;

  assign fp_out_10_fp_out_21_re = addr_hit[18] && reg_re;

  assign fp_out_11_fp_out_22_re = addr_hit[19] && reg_re;

  assign fp_out_11_fp_out_23_re = addr_hit[19] && reg_re;

  assign fp_out_12_fp_out_24_re = addr_hit[20] && reg_re;

  assign fp_out_12_fp_out_25_re = addr_hit[20] && reg_re;

  assign fp_out_13_fp_out_26_re = addr_hit[21] && reg_re;

  assign fp_out_13_fp_out_27_re = addr_hit[21] && reg_re;

  assign fp_out_14_fp_out_28_re = addr_hit[22] && reg_re;

  assign fp_out_14_fp_out_29_re = addr_hit[22] && reg_re;

  assign fp_out_15_fp_out_30_re = addr_hit[23] && reg_re;

  assign fp_out_15_fp_out_31_re = addr_hit[23] && reg_re;

  assign fp_out_16_fp_out_32_re = addr_hit[24] && reg_re;

  assign fp_out_16_fp_out_33_re = addr_hit[24] && reg_re;

  assign fp_out_17_fp_out_34_re = addr_hit[25] && reg_re;

  assign fp_out_17_fp_out_35_re = addr_hit[25] && reg_re;

  assign fp_out_18_fp_out_36_re = addr_hit[26] && reg_re;

  assign fp_out_18_fp_out_37_re = addr_hit[26] && reg_re;

  assign fp_out_19_fp_out_38_re = addr_hit[27] && reg_re;

  assign fp_out_19_fp_out_39_re = addr_hit[27] && reg_re;

  assign fp_out_20_fp_out_40_re = addr_hit[28] && reg_re;

  assign fp_out_20_fp_out_41_re = addr_hit[28] && reg_re;

  assign fp_out_21_fp_out_42_re = addr_hit[29] && reg_re;

  assign fp_out_21_fp_out_43_re = addr_hit[29] && reg_re;

  assign fp_out_22_fp_out_44_re = addr_hit[30] && reg_re;

  assign fp_out_22_fp_out_45_re = addr_hit[30] && reg_re;

  assign fp_out_23_fp_out_46_re = addr_hit[31] && reg_re;

  assign fp_out_23_fp_out_47_re = addr_hit[31] && reg_re;

  assign fp_out_24_fp_out_48_re = addr_hit[32] && reg_re;

  assign fp_out_24_fp_out_49_re = addr_hit[32] && reg_re;

  assign fp_out_25_fp_out_50_re = addr_hit[33] && reg_re;

  assign fp_out_25_fp_out_51_re = addr_hit[33] && reg_re;

  assign fp_out_26_fp_out_52_re = addr_hit[34] && reg_re;

  assign fp_out_26_fp_out_53_re = addr_hit[34] && reg_re;

  assign fp_out_27_fp_out_54_re = addr_hit[35] && reg_re;

  assign fp_out_27_fp_out_55_re = addr_hit[35] && reg_re;

  assign fp_out_28_fp_out_56_re = addr_hit[36] && reg_re;

  assign fp_out_28_fp_out_57_re = addr_hit[36] && reg_re;

  assign fp_out_29_fp_out_58_re = addr_hit[37] && reg_re;

  assign fp_out_29_fp_out_59_re = addr_hit[37] && reg_re;

  assign fp_out_30_fp_out_60_re = addr_hit[38] && reg_re;

  assign fp_out_30_fp_out_61_re = addr_hit[38] && reg_re;

  assign fp_out_31_fp_out_62_re = addr_hit[39] && reg_re;

  assign fp_out_31_fp_out_63_re = addr_hit[39] && reg_re;

  assign fp_out_32_fp_out_64_re = addr_hit[40] && reg_re;

  assign fp_out_32_fp_out_65_re = addr_hit[40] && reg_re;

  assign fp_out_33_fp_out_66_re = addr_hit[41] && reg_re;

  assign fp_out_33_fp_out_67_re = addr_hit[41] && reg_re;

  assign fp_out_34_fp_out_68_re = addr_hit[42] && reg_re;

  assign fp_out_34_fp_out_69_re = addr_hit[42] && reg_re;

  assign fp_out_35_fp_out_70_re = addr_hit[43] && reg_re;

  assign fp_out_35_fp_out_71_re = addr_hit[43] && reg_re;

  assign fp_out_36_fp_out_72_re = addr_hit[44] && reg_re;

  assign fp_out_36_fp_out_73_re = addr_hit[44] && reg_re;

  assign fp_out_37_fp_out_74_re = addr_hit[45] && reg_re;

  assign fp_out_37_fp_out_75_re = addr_hit[45] && reg_re;

  assign fp_out_38_fp_out_76_re = addr_hit[46] && reg_re;

  assign fp_out_38_fp_out_77_re = addr_hit[46] && reg_re;

  assign fp_out_39_fp_out_78_re = addr_hit[47] && reg_re;

  assign fp_out_39_fp_out_79_re = addr_hit[47] && reg_re;

  assign fp_out_40_fp_out_80_re = addr_hit[48] && reg_re;

  assign fp_out_40_fp_out_81_re = addr_hit[48] && reg_re;

  assign fp_out_41_fp_out_82_re = addr_hit[49] && reg_re;

  assign fp_out_41_fp_out_83_re = addr_hit[49] && reg_re;

  assign fp_out_42_fp_out_84_re = addr_hit[50] && reg_re;

  assign fp_out_42_fp_out_85_re = addr_hit[50] && reg_re;

  assign fp_out_43_fp_out_86_re = addr_hit[51] && reg_re;

  assign fp_out_43_fp_out_87_re = addr_hit[51] && reg_re;

  assign fp_out_44_fp_out_88_re = addr_hit[52] && reg_re;

  assign fp_out_44_fp_out_89_re = addr_hit[52] && reg_re;

  assign fp_out_45_fp_out_90_re = addr_hit[53] && reg_re;

  assign fp_out_45_fp_out_91_re = addr_hit[53] && reg_re;

  assign fp_out_46_fp_out_92_re = addr_hit[54] && reg_re;

  assign fp_out_46_fp_out_93_re = addr_hit[54] && reg_re;

  assign fp_out_47_fp_out_94_re = addr_hit[55] && reg_re;

  assign fp_out_47_fp_out_95_re = addr_hit[55] && reg_re;

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[6:0] = '0;
        reg_rdata_next[14:8] = '0;
        reg_rdata_next[23:16] = '0;
        reg_rdata_next[31:24] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[12:8] = '0;
        reg_rdata_next[20:16] = '0;
        reg_rdata_next[25:24] = '0;
      end

      addr_hit[2]: begin
        reg_rdata_next[2:0] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[17:16] = '0;
        reg_rdata_next[25:24] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[8] = '0;
        reg_rdata_next[17:16] = '0;
        reg_rdata_next[24] = '0;
      end

      addr_hit[4]: begin
        reg_rdata_next[10:0] = '0;
        reg_rdata_next[26:16] = '0;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = '0;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = ctrl2_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[0] = ctrl3_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[10:0] = fp_out_0_fp_out_0_qs;
        reg_rdata_next[21:11] = fp_out_0_fp_out_1_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[10:0] = fp_out_1_fp_out_2_qs;
        reg_rdata_next[21:11] = fp_out_1_fp_out_3_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[10:0] = fp_out_2_fp_out_4_qs;
        reg_rdata_next[21:11] = fp_out_2_fp_out_5_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[10:0] = fp_out_3_fp_out_6_qs;
        reg_rdata_next[21:11] = fp_out_3_fp_out_7_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[10:0] = fp_out_4_fp_out_8_qs;
        reg_rdata_next[21:11] = fp_out_4_fp_out_9_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[10:0] = fp_out_5_fp_out_10_qs;
        reg_rdata_next[21:11] = fp_out_5_fp_out_11_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[10:0] = fp_out_6_fp_out_12_qs;
        reg_rdata_next[21:11] = fp_out_6_fp_out_13_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[10:0] = fp_out_7_fp_out_14_qs;
        reg_rdata_next[21:11] = fp_out_7_fp_out_15_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[10:0] = fp_out_8_fp_out_16_qs;
        reg_rdata_next[21:11] = fp_out_8_fp_out_17_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[10:0] = fp_out_9_fp_out_18_qs;
        reg_rdata_next[21:11] = fp_out_9_fp_out_19_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[10:0] = fp_out_10_fp_out_20_qs;
        reg_rdata_next[21:11] = fp_out_10_fp_out_21_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[10:0] = fp_out_11_fp_out_22_qs;
        reg_rdata_next[21:11] = fp_out_11_fp_out_23_qs;
      end

      addr_hit[20]: begin
        reg_rdata_next[10:0] = fp_out_12_fp_out_24_qs;
        reg_rdata_next[21:11] = fp_out_12_fp_out_25_qs;
      end

      addr_hit[21]: begin
        reg_rdata_next[10:0] = fp_out_13_fp_out_26_qs;
        reg_rdata_next[21:11] = fp_out_13_fp_out_27_qs;
      end

      addr_hit[22]: begin
        reg_rdata_next[10:0] = fp_out_14_fp_out_28_qs;
        reg_rdata_next[21:11] = fp_out_14_fp_out_29_qs;
      end

      addr_hit[23]: begin
        reg_rdata_next[10:0] = fp_out_15_fp_out_30_qs;
        reg_rdata_next[21:11] = fp_out_15_fp_out_31_qs;
      end

      addr_hit[24]: begin
        reg_rdata_next[10:0] = fp_out_16_fp_out_32_qs;
        reg_rdata_next[21:11] = fp_out_16_fp_out_33_qs;
      end

      addr_hit[25]: begin
        reg_rdata_next[10:0] = fp_out_17_fp_out_34_qs;
        reg_rdata_next[21:11] = fp_out_17_fp_out_35_qs;
      end

      addr_hit[26]: begin
        reg_rdata_next[10:0] = fp_out_18_fp_out_36_qs;
        reg_rdata_next[21:11] = fp_out_18_fp_out_37_qs;
      end

      addr_hit[27]: begin
        reg_rdata_next[10:0] = fp_out_19_fp_out_38_qs;
        reg_rdata_next[21:11] = fp_out_19_fp_out_39_qs;
      end

      addr_hit[28]: begin
        reg_rdata_next[10:0] = fp_out_20_fp_out_40_qs;
        reg_rdata_next[21:11] = fp_out_20_fp_out_41_qs;
      end

      addr_hit[29]: begin
        reg_rdata_next[10:0] = fp_out_21_fp_out_42_qs;
        reg_rdata_next[21:11] = fp_out_21_fp_out_43_qs;
      end

      addr_hit[30]: begin
        reg_rdata_next[10:0] = fp_out_22_fp_out_44_qs;
        reg_rdata_next[21:11] = fp_out_22_fp_out_45_qs;
      end

      addr_hit[31]: begin
        reg_rdata_next[10:0] = fp_out_23_fp_out_46_qs;
        reg_rdata_next[21:11] = fp_out_23_fp_out_47_qs;
      end

      addr_hit[32]: begin
        reg_rdata_next[10:0] = fp_out_24_fp_out_48_qs;
        reg_rdata_next[21:11] = fp_out_24_fp_out_49_qs;
      end

      addr_hit[33]: begin
        reg_rdata_next[10:0] = fp_out_25_fp_out_50_qs;
        reg_rdata_next[21:11] = fp_out_25_fp_out_51_qs;
      end

      addr_hit[34]: begin
        reg_rdata_next[10:0] = fp_out_26_fp_out_52_qs;
        reg_rdata_next[21:11] = fp_out_26_fp_out_53_qs;
      end

      addr_hit[35]: begin
        reg_rdata_next[10:0] = fp_out_27_fp_out_54_qs;
        reg_rdata_next[21:11] = fp_out_27_fp_out_55_qs;
      end

      addr_hit[36]: begin
        reg_rdata_next[10:0] = fp_out_28_fp_out_56_qs;
        reg_rdata_next[21:11] = fp_out_28_fp_out_57_qs;
      end

      addr_hit[37]: begin
        reg_rdata_next[10:0] = fp_out_29_fp_out_58_qs;
        reg_rdata_next[21:11] = fp_out_29_fp_out_59_qs;
      end

      addr_hit[38]: begin
        reg_rdata_next[10:0] = fp_out_30_fp_out_60_qs;
        reg_rdata_next[21:11] = fp_out_30_fp_out_61_qs;
      end

      addr_hit[39]: begin
        reg_rdata_next[10:0] = fp_out_31_fp_out_62_qs;
        reg_rdata_next[21:11] = fp_out_31_fp_out_63_qs;
      end

      addr_hit[40]: begin
        reg_rdata_next[10:0] = fp_out_32_fp_out_64_qs;
        reg_rdata_next[21:11] = fp_out_32_fp_out_65_qs;
      end

      addr_hit[41]: begin
        reg_rdata_next[10:0] = fp_out_33_fp_out_66_qs;
        reg_rdata_next[21:11] = fp_out_33_fp_out_67_qs;
      end

      addr_hit[42]: begin
        reg_rdata_next[10:0] = fp_out_34_fp_out_68_qs;
        reg_rdata_next[21:11] = fp_out_34_fp_out_69_qs;
      end

      addr_hit[43]: begin
        reg_rdata_next[10:0] = fp_out_35_fp_out_70_qs;
        reg_rdata_next[21:11] = fp_out_35_fp_out_71_qs;
      end

      addr_hit[44]: begin
        reg_rdata_next[10:0] = fp_out_36_fp_out_72_qs;
        reg_rdata_next[21:11] = fp_out_36_fp_out_73_qs;
      end

      addr_hit[45]: begin
        reg_rdata_next[10:0] = fp_out_37_fp_out_74_qs;
        reg_rdata_next[21:11] = fp_out_37_fp_out_75_qs;
      end

      addr_hit[46]: begin
        reg_rdata_next[10:0] = fp_out_38_fp_out_76_qs;
        reg_rdata_next[21:11] = fp_out_38_fp_out_77_qs;
      end

      addr_hit[47]: begin
        reg_rdata_next[10:0] = fp_out_39_fp_out_78_qs;
        reg_rdata_next[21:11] = fp_out_39_fp_out_79_qs;
      end

      addr_hit[48]: begin
        reg_rdata_next[10:0] = fp_out_40_fp_out_80_qs;
        reg_rdata_next[21:11] = fp_out_40_fp_out_81_qs;
      end

      addr_hit[49]: begin
        reg_rdata_next[10:0] = fp_out_41_fp_out_82_qs;
        reg_rdata_next[21:11] = fp_out_41_fp_out_83_qs;
      end

      addr_hit[50]: begin
        reg_rdata_next[10:0] = fp_out_42_fp_out_84_qs;
        reg_rdata_next[21:11] = fp_out_42_fp_out_85_qs;
      end

      addr_hit[51]: begin
        reg_rdata_next[10:0] = fp_out_43_fp_out_86_qs;
        reg_rdata_next[21:11] = fp_out_43_fp_out_87_qs;
      end

      addr_hit[52]: begin
        reg_rdata_next[10:0] = fp_out_44_fp_out_88_qs;
        reg_rdata_next[21:11] = fp_out_44_fp_out_89_qs;
      end

      addr_hit[53]: begin
        reg_rdata_next[10:0] = fp_out_45_fp_out_90_qs;
        reg_rdata_next[21:11] = fp_out_45_fp_out_91_qs;
      end

      addr_hit[54]: begin
        reg_rdata_next[10:0] = fp_out_46_fp_out_92_qs;
        reg_rdata_next[21:11] = fp_out_46_fp_out_93_qs;
      end

      addr_hit[55]: begin
        reg_rdata_next[10:0] = fp_out_47_fp_out_94_qs;
        reg_rdata_next[21:11] = fp_out_47_fp_out_95_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule

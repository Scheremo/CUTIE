// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package layer_params_reg_pkg;

  // Param list
  parameter int fp_out = 96;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////
  typedef struct packed {
    struct packed {
      logic [6:0]  q;
    } width;
    struct packed {
      logic [6:0]  q;
    } height;
    struct packed {
      logic [7:0]  q;
    } n_i;
    struct packed {
      logic [7:0]  q;
    } n_o;
  } layer_params_reg2hw_feature_map_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } is_tcn;
    struct packed {
      logic [4:0]  q;
    } tcn_width;
    struct packed {
      logic [4:0]  q;
    } tcn_width_mod_dil;
    struct packed {
      logic [1:0]  q;
    } tcn_k;
  } layer_params_reg2hw_tcn_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
    } k;
    struct packed {
      logic        q;
    } padding;
    struct packed {
      logic [1:0]  q;
    } stride_w;
    struct packed {
      logic [1:0]  q;
    } stride_h;
  } layer_params_reg2hw_kernel_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } en;
    struct packed {
      logic        q;
    } p_type;
    struct packed {
      logic [1:0]  q;
    } kernel;
    struct packed {
      logic        q;
    } padding;
  } layer_params_reg2hw_pooling_reg_t;

  typedef struct packed {
    struct packed {
      logic [10:0] q;
      logic        qe;
    } th_low;
    struct packed {
      logic [10:0] q;
      logic        qe;
    } th_high;
  } layer_params_reg2hw_thresholds_reg_t;

  typedef struct packed {
    logic        q;
  } layer_params_reg2hw_ctrl1_reg_t;

  typedef struct packed {
    logic        q;
  } layer_params_reg2hw_ctrl2_reg_t;


  typedef struct packed {
    struct packed {
      logic [10:0] d;
      logic        de;
    } th_low;
    struct packed {
      logic [10:0] d;
      logic        de;
    } th_high;
  } layer_params_hw2reg_thresholds_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } layer_params_hw2reg_ctrl2_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } layer_params_hw2reg_ctrl3_reg_t;

  typedef struct packed {
    logic [10:0] d;
  } layer_params_hw2reg_fp_out_mreg_t;


  ///////////////////////////////////////
  // Register to internal design logic //
  ///////////////////////////////////////
  typedef struct packed {
    layer_params_reg2hw_feature_map_reg_t feature_map; // [82:53]
    layer_params_reg2hw_tcn_reg_t tcn; // [52:40]
    layer_params_reg2hw_kernel_reg_t kernel; // [39:32]
    layer_params_reg2hw_pooling_reg_t pooling; // [31:27]
    layer_params_reg2hw_thresholds_reg_t thresholds; // [26:3]
    layer_params_reg2hw_ctrl1_reg_t ctrl1; // [2:2]
    layer_params_reg2hw_ctrl2_reg_t ctrl2; // [1:1]
  } layer_params_reg2hw_t;

  ///////////////////////////////////////
  // Internal design logic to register //
  ///////////////////////////////////////
  typedef struct packed {
    layer_params_hw2reg_thresholds_reg_t thresholds; // [1084:1061]
    layer_params_hw2reg_ctrl2_reg_t ctrl2; // [1060:1060]
    layer_params_hw2reg_ctrl3_reg_t ctrl3; // [1059:1060]
    layer_params_hw2reg_fp_out_mreg_t [95:0] fp_out; // [1059:4]
  } layer_params_hw2reg_t;

  // Register Address
  parameter logic [7:0] LAYER_PARAMS_FEATURE_MAP_OFFSET = 8'h 0;
  parameter logic [7:0] LAYER_PARAMS_TCN_OFFSET = 8'h 4;
  parameter logic [7:0] LAYER_PARAMS_KERNEL_OFFSET = 8'h 8;
  parameter logic [7:0] LAYER_PARAMS_POOLING_OFFSET = 8'h c;
  parameter logic [7:0] LAYER_PARAMS_THRESHOLDS_OFFSET = 8'h 10;
  parameter logic [7:0] LAYER_PARAMS_CTRL1_OFFSET = 8'h 14;
  parameter logic [7:0] LAYER_PARAMS_CTRL2_OFFSET = 8'h 18;
  parameter logic [7:0] LAYER_PARAMS_CTRL3_OFFSET = 8'h 1c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_0_OFFSET = 8'h 20;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_1_OFFSET = 8'h 24;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_2_OFFSET = 8'h 28;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_3_OFFSET = 8'h 2c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_4_OFFSET = 8'h 30;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_5_OFFSET = 8'h 34;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_6_OFFSET = 8'h 38;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_7_OFFSET = 8'h 3c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_8_OFFSET = 8'h 40;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_9_OFFSET = 8'h 44;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_10_OFFSET = 8'h 48;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_11_OFFSET = 8'h 4c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_12_OFFSET = 8'h 50;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_13_OFFSET = 8'h 54;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_14_OFFSET = 8'h 58;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_15_OFFSET = 8'h 5c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_16_OFFSET = 8'h 60;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_17_OFFSET = 8'h 64;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_18_OFFSET = 8'h 68;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_19_OFFSET = 8'h 6c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_20_OFFSET = 8'h 70;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_21_OFFSET = 8'h 74;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_22_OFFSET = 8'h 78;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_23_OFFSET = 8'h 7c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_24_OFFSET = 8'h 80;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_25_OFFSET = 8'h 84;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_26_OFFSET = 8'h 88;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_27_OFFSET = 8'h 8c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_28_OFFSET = 8'h 90;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_29_OFFSET = 8'h 94;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_30_OFFSET = 8'h 98;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_31_OFFSET = 8'h 9c;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_32_OFFSET = 8'h a0;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_33_OFFSET = 8'h a4;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_34_OFFSET = 8'h a8;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_35_OFFSET = 8'h ac;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_36_OFFSET = 8'h b0;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_37_OFFSET = 8'h b4;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_38_OFFSET = 8'h b8;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_39_OFFSET = 8'h bc;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_40_OFFSET = 8'h c0;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_41_OFFSET = 8'h c4;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_42_OFFSET = 8'h c8;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_43_OFFSET = 8'h cc;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_44_OFFSET = 8'h d0;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_45_OFFSET = 8'h d4;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_46_OFFSET = 8'h d8;
  parameter logic [7:0] LAYER_PARAMS_FP_OUT_47_OFFSET = 8'h dc;


  // Register Index
  typedef enum int {
    LAYER_PARAMS_FEATURE_MAP,
    LAYER_PARAMS_TCN,
    LAYER_PARAMS_KERNEL,
    LAYER_PARAMS_POOLING,
    LAYER_PARAMS_THRESHOLDS,
    LAYER_PARAMS_CTRL1,
    LAYER_PARAMS_CTRL2,
    LAYER_PARAMS_CTRL3,
    LAYER_PARAMS_FP_OUT_0,
    LAYER_PARAMS_FP_OUT_1,
    LAYER_PARAMS_FP_OUT_2,
    LAYER_PARAMS_FP_OUT_3,
    LAYER_PARAMS_FP_OUT_4,
    LAYER_PARAMS_FP_OUT_5,
    LAYER_PARAMS_FP_OUT_6,
    LAYER_PARAMS_FP_OUT_7,
    LAYER_PARAMS_FP_OUT_8,
    LAYER_PARAMS_FP_OUT_9,
    LAYER_PARAMS_FP_OUT_10,
    LAYER_PARAMS_FP_OUT_11,
    LAYER_PARAMS_FP_OUT_12,
    LAYER_PARAMS_FP_OUT_13,
    LAYER_PARAMS_FP_OUT_14,
    LAYER_PARAMS_FP_OUT_15,
    LAYER_PARAMS_FP_OUT_16,
    LAYER_PARAMS_FP_OUT_17,
    LAYER_PARAMS_FP_OUT_18,
    LAYER_PARAMS_FP_OUT_19,
    LAYER_PARAMS_FP_OUT_20,
    LAYER_PARAMS_FP_OUT_21,
    LAYER_PARAMS_FP_OUT_22,
    LAYER_PARAMS_FP_OUT_23,
    LAYER_PARAMS_FP_OUT_24,
    LAYER_PARAMS_FP_OUT_25,
    LAYER_PARAMS_FP_OUT_26,
    LAYER_PARAMS_FP_OUT_27,
    LAYER_PARAMS_FP_OUT_28,
    LAYER_PARAMS_FP_OUT_29,
    LAYER_PARAMS_FP_OUT_30,
    LAYER_PARAMS_FP_OUT_31,
    LAYER_PARAMS_FP_OUT_32,
    LAYER_PARAMS_FP_OUT_33,
    LAYER_PARAMS_FP_OUT_34,
    LAYER_PARAMS_FP_OUT_35,
    LAYER_PARAMS_FP_OUT_36,
    LAYER_PARAMS_FP_OUT_37,
    LAYER_PARAMS_FP_OUT_38,
    LAYER_PARAMS_FP_OUT_39,
    LAYER_PARAMS_FP_OUT_40,
    LAYER_PARAMS_FP_OUT_41,
    LAYER_PARAMS_FP_OUT_42,
    LAYER_PARAMS_FP_OUT_43,
    LAYER_PARAMS_FP_OUT_44,
    LAYER_PARAMS_FP_OUT_45,
    LAYER_PARAMS_FP_OUT_46,
    LAYER_PARAMS_FP_OUT_47
  } layer_params_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] LAYER_PARAMS_PERMIT [56] = '{
    4'b 1111, // index[ 0] LAYER_PARAMS_FEATURE_MAP
    4'b 1111, // index[ 1] LAYER_PARAMS_TCN
    4'b 1111, // index[ 2] LAYER_PARAMS_KERNEL
    4'b 1111, // index[ 3] LAYER_PARAMS_POOLING
    4'b 1111, // index[ 4] LAYER_PARAMS_THRESHOLDS
    4'b 0001, // index[ 5] LAYER_PARAMS_CTRL1
    4'b 0001, // index[ 6] LAYER_PARAMS_CTRL2
    4'b 0001, // index[ 7] LAYER_PARAMS_CTRL3
    4'b 0111, // index[ 8] LAYER_PARAMS_FP_OUT_0
    4'b 0111, // index[ 9] LAYER_PARAMS_FP_OUT_1
    4'b 0111, // index[10] LAYER_PARAMS_FP_OUT_2
    4'b 0111, // index[11] LAYER_PARAMS_FP_OUT_3
    4'b 0111, // index[12] LAYER_PARAMS_FP_OUT_4
    4'b 0111, // index[13] LAYER_PARAMS_FP_OUT_5
    4'b 0111, // index[14] LAYER_PARAMS_FP_OUT_6
    4'b 0111, // index[15] LAYER_PARAMS_FP_OUT_7
    4'b 0111, // index[16] LAYER_PARAMS_FP_OUT_8
    4'b 0111, // index[17] LAYER_PARAMS_FP_OUT_9
    4'b 0111, // index[18] LAYER_PARAMS_FP_OUT_10
    4'b 0111, // index[19] LAYER_PARAMS_FP_OUT_11
    4'b 0111, // index[20] LAYER_PARAMS_FP_OUT_12
    4'b 0111, // index[21] LAYER_PARAMS_FP_OUT_13
    4'b 0111, // index[22] LAYER_PARAMS_FP_OUT_14
    4'b 0111, // index[23] LAYER_PARAMS_FP_OUT_15
    4'b 0111, // index[24] LAYER_PARAMS_FP_OUT_16
    4'b 0111, // index[25] LAYER_PARAMS_FP_OUT_17
    4'b 0111, // index[26] LAYER_PARAMS_FP_OUT_18
    4'b 0111, // index[27] LAYER_PARAMS_FP_OUT_19
    4'b 0111, // index[28] LAYER_PARAMS_FP_OUT_20
    4'b 0111, // index[29] LAYER_PARAMS_FP_OUT_21
    4'b 0111, // index[30] LAYER_PARAMS_FP_OUT_22
    4'b 0111, // index[31] LAYER_PARAMS_FP_OUT_23
    4'b 0111, // index[32] LAYER_PARAMS_FP_OUT_24
    4'b 0111, // index[33] LAYER_PARAMS_FP_OUT_25
    4'b 0111, // index[34] LAYER_PARAMS_FP_OUT_26
    4'b 0111, // index[35] LAYER_PARAMS_FP_OUT_27
    4'b 0111, // index[36] LAYER_PARAMS_FP_OUT_28
    4'b 0111, // index[37] LAYER_PARAMS_FP_OUT_29
    4'b 0111, // index[38] LAYER_PARAMS_FP_OUT_30
    4'b 0111, // index[39] LAYER_PARAMS_FP_OUT_31
    4'b 0111, // index[40] LAYER_PARAMS_FP_OUT_32
    4'b 0111, // index[41] LAYER_PARAMS_FP_OUT_33
    4'b 0111, // index[42] LAYER_PARAMS_FP_OUT_34
    4'b 0111, // index[43] LAYER_PARAMS_FP_OUT_35
    4'b 0111, // index[44] LAYER_PARAMS_FP_OUT_36
    4'b 0111, // index[45] LAYER_PARAMS_FP_OUT_37
    4'b 0111, // index[46] LAYER_PARAMS_FP_OUT_38
    4'b 0111, // index[47] LAYER_PARAMS_FP_OUT_39
    4'b 0111, // index[48] LAYER_PARAMS_FP_OUT_40
    4'b 0111, // index[49] LAYER_PARAMS_FP_OUT_41
    4'b 0111, // index[50] LAYER_PARAMS_FP_OUT_42
    4'b 0111, // index[51] LAYER_PARAMS_FP_OUT_43
    4'b 0111, // index[52] LAYER_PARAMS_FP_OUT_44
    4'b 0111, // index[53] LAYER_PARAMS_FP_OUT_45
    4'b 0111, // index[54] LAYER_PARAMS_FP_OUT_46
    4'b 0111  // index[55] LAYER_PARAMS_FP_OUT_47
  };
endpackage

